#include <vector>
#include <unordered_map>
#include <iostream>
#include <numeric>
#include <algorithm>
class Solution {
public:
    int maxHappyGroups(int batchSize, std::vector<int>& groups) {
        std::vector<int> remainderCount(batchSize, 0);
        for (int group : groups) {
            remainderCount[group % batchSize]++;
        }
        int happyGroups = remainderCount[0];
        for (int i = 1; i <= batchSize / 2; i++) {
            if (i == batchSize - i) {
                happyGroups += remainderCount[i] / 2;
                remainderCount[i] %= 2;
            } else {
                int pairs = std::min(remainderCount[i], remainderCount[batchSize - i]);
                happyGroups += pairs;
                remainderCount[i] -= pairs;
                remainderCount[batchSize - i] -= pairs;
            }
        }
        std::unordered_map<std::string, int> memo;
        return happyGroups + dfs(remainderCount, 0, batchSize, memo);
    }
    private:
    int dfs(std::vector<int>& remainderCount, int currentRemainder, int batchSize,
            std::unordered_map<std::string, int>& memo) {
        // Create a key for memoization
        std::string key = serialize(remainderCount, currentRemainder);
        if (memo.count(key)) return memo[key];
        int totalGroups = std::accumulate(remainderCount.begin(), remainderCount.end(), 0);
        if (totalGroups == 0) return 0;
        int maxHappy = 0;
        for (int i = 1; i < remainderCount.size(); i++) {
            if (remainderCount[i] > 0) {
                remainderCount[i]--;
                int newRemainder = (currentRemainder + i) % batchSize;
                maxHappy = std::max(maxHappy,
                                    ((newRemainder == 0) ? 1 : 0) +
                                    dfs(remainderCount, newRemainder, batchSize, memo));
                remainderCount[i]++;
            }
        }
        return memo[key] = maxHappy;
    }
    std::string serialize(const std::vector<int>& remainderCount, int currentRemainder) {
        std::string key = std::to_string(currentRemainder) + "|";
        for (int count : remainderCount) {
            key += std::to_string(count) + ",";
        }
        return key;
    }
};

int main() {
    Solution solution;
    int batchSize = 3;
    std::vector<int> groups = {1, 2, 3, 4, 5, 6};

    std::cout << "Maximum Happy Groups: " << solution.maxHappyGroups(batchSize, groups) << std::endl;

    return 0;
}
